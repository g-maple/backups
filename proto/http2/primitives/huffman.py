import struct

__all__ = [
    "encode_huffman",
    "decode_huffman"
]
_ORDINAL_TO_HUFFMAN = [
    # 00 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x00', 0b1111111111000,                          13),
    (b'\x01', 0b11111111111111111011000,                23),
    (b'\x02', 0b1111111111111111111111100010,           28),
    (b'\x03', 0b1111111111111111111111100011,           28),
    (b'\x04', 0b1111111111111111111111100100,           28),
    (b'\x05', 0b1111111111111111111111100101,           28),
    (b'\x06', 0b1111111111111111111111100110,           28),
    (b'\x07', 0b1111111111111111111111100111,           28),
    (b'\x08', 0b1111111111111111111111101000,           28),
    (b'\x09', 0b111111111111111111101010,               24),
    (b'\x0a', 0b111111111111111111111111111100,         30),
    (b'\x0b', 0b1111111111111111111111101001,           28),
    (b'\x0c', 0b1111111111111111111111101010,           28),
    (b'\x0d', 0b111111111111111111111111111101,         30),
    (b'\x0e', 0b1111111111111111111111101011,           28),
    (b'\x0f', 0b1111111111111111111111101100,           28),
    # 10 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x10', 0b1111111111111111111111101101,           28),
    (b'\x11', 0b1111111111111111111111101110,           28),
    (b'\x12', 0b1111111111111111111111101111,           28),
    (b'\x13', 0b1111111111111111111111110000,           28),
    (b'\x14', 0b1111111111111111111111110001,           28),
    (b'\x15', 0b1111111111111111111111110010,           28),
    (b'\x16', 0b111111111111111111111111111110,         30),
    (b'\x17', 0b1111111111111111111111110011,           28),
    (b'\x18', 0b1111111111111111111111110100,           28),
    (b'\x19', 0b1111111111111111111111110101,           28),
    (b'\x1a', 0b1111111111111111111111110110,           28),
    (b'\x1b', 0b1111111111111111111111110111,           28),
    (b'\x1c', 0b1111111111111111111111111000,           28),
    (b'\x1d', 0b1111111111111111111111111001,           28),
    (b'\x1e', 0b1111111111111111111111111010,           28),
    (b'\x1f', 0b1111111111111111111111111011,           28),
    # 20 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x20', 0b010100,                                 6),
    (b'\x21', 0b1111111000,                             10),
    (b'\x22', 0b1111111001,                             10),
    (b'\x23', 0b111111111010,                           12),
    (b'\x24', 0b1111111111001,                          13),
    (b'\x25', 0b010101,                                 6),
    (b'\x26', 0b11111000,                               8),
    (b'\x27', 0b11111111010,                            11),
    (b'\x28', 0b1111111010,                             10),
    (b'\x29', 0b1111111011,                             10),
    (b'\x2a', 0b11111001,                               8),
    (b'\x2b', 0b11111111011,                            11),
    (b'\x2c', 0b11111010,                               8),
    (b'\x2d', 0b010110,                                 6),
    (b'\x2e', 0b010111,                                 6),
    (b'\x2f', 0b011000,                                 6),
    # 30 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x30', 0b00000,                                  5),
    (b'\x31', 0b00001,                                  5),
    (b'\x32', 0b00010,                                  5),
    (b'\x33', 0b011001,                                 6),
    (b'\x34', 0b011010,                                 6),
    (b'\x35', 0b011011,                                 6),
    (b'\x36', 0b011100,                                 6),
    (b'\x37', 0b011101,                                 6),
    (b'\x38', 0b011110,                                 6),
    (b'\x39', 0b011111,                                 6),
    (b'\x3a', 0b1011100,                                7),
    (b'\x3b', 0b11111011,                               8),
    (b'\x3c', 0b111111111111100,                        15),
    (b'\x3d', 0b100000,                                 6),
    (b'\x3e', 0b111111111011,                           12),
    (b'\x3f', 0b1111111100,                             10),
    # 40 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x40', 0b1111111111010,                          13),
    (b'\x41', 0b100001,                                 6),
    (b'\x42', 0b1011101,                                7),
    (b'\x43', 0b1011110,                                7),
    (b'\x44', 0b1011111,                                7),
    (b'\x45', 0b1100000,                                7),
    (b'\x46', 0b1100001,                                7),
    (b'\x47', 0b1100010,                                7),
    (b'\x48', 0b1100011,                                7),
    (b'\x49', 0b1100100,                                7),
    (b'\x4a', 0b1100101,                                7),
    (b'\x4b', 0b1100110,                                7),
    (b'\x4c', 0b1100111,                                7),
    (b'\x4d', 0b1101000,                                7),
    (b'\x4e', 0b1101001,                                7),
    (b'\x4f', 0b1101010,                                7),
    # 50 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x50', 0b1101011,                                7),
    (b'\x51', 0b1101100,                                7),
    (b'\x52', 0b1101101,                                7),
    (b'\x53', 0b1101110,                                7),
    (b'\x54', 0b1101111,                                7),
    (b'\x55', 0b1110000,                                7),
    (b'\x56', 0b1110001,                                7),
    (b'\x57', 0b1110010,                                7),
    (b'\x58', 0b11111100,                               8),
    (b'\x59', 0b1110011,                                7),
    (b'\x5a', 0b11111101,                               8),
    (b'\x5b', 0b1111111111011,                          13),
    (b'\x5c', 0b1111111111111110000,                    19),
    (b'\x5d', 0b1111111111100,                          13),
    (b'\x5e', 0b11111111111100,                         14),
    (b'\x5f', 0b100010,                                 6),
    # 60 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x60', 0b111111111111101,                        15),
    (b'\x61', 0b00011,                                  5),
    (b'\x62', 0b100011,                                 6),
    (b'\x63', 0b00100,                                  5),
    (b'\x64', 0b100100,                                 6),
    (b'\x65', 0b00101,                                  5),
    (b'\x66', 0b100101,                                 6),
    (b'\x67', 0b100110,                                 6),
    (b'\x68', 0b100111,                                 6),
    (b'\x69', 0b00110,                                  5),
    (b'\x6a', 0b1110100,                                7),
    (b'\x6b', 0b1110101,                                7),
    (b'\x6c', 0b101000,                                 6),
    (b'\x6d', 0b101001,                                 6),
    (b'\x6e', 0b101010,                                 6),
    (b'\x6f', 0b00111,                                  5),
    # 70 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x70', 0b101011,                                 6),
    (b'\x71', 0b1110110,                                7),
    (b'\x72', 0b101100,                                 6),
    (b'\x73', 0b01000,                                  5),
    (b'\x74', 0b01001,                                  5),
    (b'\x75', 0b101101,                                 6),
    (b'\x76', 0b1110111,                                7),
    (b'\x77', 0b1111000,                                7),
    (b'\x78', 0b1111001,                                7),
    (b'\x79', 0b1111010,                                7),
    (b'\x7a', 0b1111011,                                7),
    (b'\x7b', 0b111111111111110,                        15),
    (b'\x7c', 0b11111111100,                            11),
    (b'\x7d', 0b11111111111101,                         14),
    (b'\x7e', 0b1111111111101,                          13),
    (b'\x7f', 0b1111111111111111111111111100,           28),
    # 80 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x80', 0b11111111111111100110,                   20),
    (b'\x81', 0b1111111111111111010010,                 22),
    (b'\x82', 0b11111111111111100111,                   20),
    (b'\x83', 0b11111111111111101000,                   20),
    (b'\x84', 0b1111111111111111010011,                 22),
    (b'\x85', 0b1111111111111111010100,                 22),
    (b'\x86', 0b1111111111111111010101,                 22),
    (b'\x87', 0b11111111111111111011001,                23),
    (b'\x88', 0b1111111111111111010110,                 22),
    (b'\x89', 0b11111111111111111011010,                23),
    (b'\x8a', 0b11111111111111111011011,                23),
    (b'\x8b', 0b11111111111111111011100,                23),
    (b'\x8c', 0b11111111111111111011101,                23),
    (b'\x8d', 0b11111111111111111011110,                23),
    (b'\x8e', 0b111111111111111111101011,               24),
    (b'\x8f', 0b11111111111111111011111,                23),
    # 90 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\x90', 0b111111111111111111101100,               24),
    (b'\x91', 0b111111111111111111101101,               24),
    (b'\x92', 0b1111111111111111010111,                 22),
    (b'\x93', 0b11111111111111111100000,                23),
    (b'\x94', 0b111111111111111111101110,               24),
    (b'\x95', 0b11111111111111111100001,                23),
    (b'\x96', 0b11111111111111111100010,                23),
    (b'\x97', 0b11111111111111111100011,                23),
    (b'\x98', 0b11111111111111111100100,                23),
    (b'\x99', 0b111111111111111011100,                  21),
    (b'\x9a', 0b1111111111111111011000,                 22),
    (b'\x9b', 0b11111111111111111100101,                23),
    (b'\x9c', 0b1111111111111111011001,                 22),
    (b'\x9d', 0b11111111111111111100110,                23),
    (b'\x9e', 0b11111111111111111100111,                23),
    (b'\x9f', 0b111111111111111111101111,               24),
    # A0 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\xa0', 0b1111111111111111011010,                 22),
    (b'\xa1', 0b111111111111111011101,                  21),
    (b'\xa2', 0b11111111111111101001,                   20),
    (b'\xa3', 0b1111111111111111011011,                 22),
    (b'\xa4', 0b1111111111111111011100,                 22),
    (b'\xa5', 0b11111111111111111101000,                23),
    (b'\xa6', 0b11111111111111111101001,                23),
    (b'\xa7', 0b111111111111111011110,                  21),
    (b'\xa8', 0b11111111111111111101010,                23),
    (b'\xa9', 0b1111111111111111011101,                 22),
    (b'\xaa', 0b1111111111111111011110,                 22),
    (b'\xab', 0b111111111111111111110000,               24),
    (b'\xac', 0b111111111111111011111,                  21),
    (b'\xad', 0b1111111111111111011111,                 22),
    (b'\xae', 0b11111111111111111101011,                23),
    (b'\xaf', 0b11111111111111111101100,                23),
    # B0 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\xb0', 0b111111111111111100000,                  21),
    (b'\xb1', 0b111111111111111100001,                  21),
    (b'\xb2', 0b1111111111111111100000,                 22),
    (b'\xb3', 0b111111111111111100010,                  21),
    (b'\xb4', 0b11111111111111111101101,                23),
    (b'\xb5', 0b1111111111111111100001,                 22),
    (b'\xb6', 0b11111111111111111101110,                23),
    (b'\xb7', 0b11111111111111111101111,                23),
    (b'\xb8', 0b11111111111111101010,                   20),
    (b'\xb9', 0b1111111111111111100010,                 22),
    (b'\xba', 0b1111111111111111100011,                 22),
    (b'\xbb', 0b1111111111111111100100,                 22),
    (b'\xbc', 0b11111111111111111110000,                23),
    (b'\xbd', 0b1111111111111111100101,                 22),
    (b'\xbe', 0b1111111111111111100110,                 22),
    (b'\xbf', 0b11111111111111111110001,                23),
    # C0 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\xc0', 0b11111111111111111111100000,             26),
    (b'\xc1', 0b11111111111111111111100001,             26),
    (b'\xc2', 0b11111111111111101011,                   20),
    (b'\xc3', 0b1111111111111110001,                    19),
    (b'\xc4', 0b1111111111111111100111,                 22),
    (b'\xc5', 0b11111111111111111110010,                23),
    (b'\xc6', 0b1111111111111111101000,                 22),
    (b'\xc7', 0b1111111111111111111101100,              25),
    (b'\xc8', 0b11111111111111111111100010,             26),
    (b'\xc9', 0b11111111111111111111100011,             26),
    (b'\xca', 0b11111111111111111111100100,             26),
    (b'\xcb', 0b111111111111111111111011110,            27),
    (b'\xcc', 0b111111111111111111111011111,            27),
    (b'\xcd', 0b11111111111111111111100101,             26),
    (b'\xce', 0b111111111111111111110001,               24),
    (b'\xcf', 0b1111111111111111111101101,              25),
    # D0 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\xd0', 0b1111111111111110010,                    19),
    (b'\xd1', 0b111111111111111100011,                  21),
    (b'\xd2', 0b11111111111111111111100110,             26),
    (b'\xd3', 0b111111111111111111111100000,            27),
    (b'\xd4', 0b111111111111111111111100001,            27),
    (b'\xd5', 0b11111111111111111111100111,             26),
    (b'\xd6', 0b111111111111111111111100010,            27),
    (b'\xd7', 0b111111111111111111110010,               24),
    (b'\xd8', 0b111111111111111100100,                  21),
    (b'\xd9', 0b111111111111111100101,                  21),
    (b'\xda', 0b11111111111111111111101000,             26),
    (b'\xdb', 0b11111111111111111111101001,             26),
    (b'\xdc', 0b1111111111111111111111111101,           28),
    (b'\xdd', 0b111111111111111111111100011,            27),
    (b'\xde', 0b111111111111111111111100100,            27),
    (b'\xdf', 0b111111111111111111111100101,            27),
    # E0 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\xe0', 0b11111111111111101100,                   20),
    (b'\xe1', 0b111111111111111111110011,               24),
    (b'\xe2', 0b11111111111111101101,                   20),
    (b'\xe3', 0b111111111111111100110,                  21),
    (b'\xe4', 0b1111111111111111101001,                 22),
    (b'\xe5', 0b111111111111111100111,                  21),
    (b'\xe6', 0b111111111111111101000,                  21),
    (b'\xe7', 0b11111111111111111110011,                23),
    (b'\xe8', 0b1111111111111111101010,                 22),
    (b'\xe9', 0b1111111111111111101011,                 22),
    (b'\xea', 0b1111111111111111111101110,              25),
    (b'\xeb', 0b1111111111111111111101111,              25),
    (b'\xec', 0b111111111111111111110100,               24),
    (b'\xed', 0b111111111111111111110101,               24),
    (b'\xee', 0b11111111111111111111101010,             26),
    (b'\xef', 0b11111111111111111110100,                23),
    # F0 ------ 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'\xf0', 0b11111111111111111111101011,             26),
    (b'\xf1', 0b111111111111111111111100110,            27),
    (b'\xf2', 0b11111111111111111111101100,             26),
    (b'\xf3', 0b11111111111111111111101101,             26),
    (b'\xf4', 0b111111111111111111111100111,            27),
    (b'\xf5', 0b111111111111111111111101000,            27),
    (b'\xf6', 0b111111111111111111111101001,            27),
    (b'\xf7', 0b111111111111111111111101010,            27),
    (b'\xf8', 0b111111111111111111111101011,            27),
    (b'\xf9', 0b1111111111111111111111111110,           28),
    (b'\xfa', 0b111111111111111111111101100,            27),
    (b'\xfb', 0b111111111111111111111101101,            27),
    (b'\xfc', 0b111111111111111111111101110,            27),
    (b'\xfd', 0b111111111111111111111101111,            27),
    (b'\xfe', 0b111111111111111111111110000,            27),
    (b'\xff', 0b11111111111111111111101110,             26),
    # EOS ----- 0 ----- 1 ----- 2 ----- 3 ----- 4 ------- #
    (b'EOS',  0b111111111111111111111111111111,         30),
]

for i in range(len(_ORDINAL_TO_HUFFMAN)):
    ordinal, binary, length = _ORDINAL_TO_HUFFMAN[i]
    _ORDINAL_TO_HUFFMAN[i] = (ordinal, binary, length)

_HUFFMAN_TO_ORDINAL = {}
for ordinal, binary, length in _ORDINAL_TO_HUFFMAN:
    curr = _HUFFMAN_TO_ORDINAL
    for i in range(length):
        i = (length - 1 - i)
        step = (binary & (1 << i)) >> i
        if i == 0:
            curr[step] = ordinal
            break
        if step not in curr:
            curr[step] = {}
        curr = curr[step]


def encode_huffman(data: bytes) -> bytes:
    """
    Encode byte data with the HPACK huffman encoding.
    :param data: Data to huffman encode.
    :return: Encoded data
    """
    huffman_length = 0
    huffman_data = 0
    huffman_packed = []
    for byte in data:
        _, huffman, length = _ORDINAL_TO_HUFFMAN[byte]
        huffman_data = (huffman_data << length) | huffman
        huffman_length += length

        while huffman_length >= 32:
            huffman_length -= 32
            huffman_packed.append(struct.pack(">I", (huffman_data >> huffman_length)))
            huffman_data &= ~(0xFFFFFFFF << huffman_length)

    # Flush the saved data until the last byte.
    while huffman_length > 8:
        huffman_packed.append(struct.pack(">B", (huffman_data >> (huffman_length - 8))))
        huffman_length -= 8
        huffman_data &= ~(0xFF << huffman_length)

    # Last byte is treated differently, need to add all 1s to pad until the next byte boundary.
    if huffman_length:
        huffman_packed.append(struct.pack(">B", (huffman_data << (8 - huffman_length) | 0xFF >> huffman_length)))

    return b''.join(huffman_packed)


def decode_huffman(data: bytes) -> bytes:
    """
    Decode byte data from the HPACK huffman encoding.
    :param data: Huffman encoded data.
    :return: Decoded data
    """
    decoded = []
    current = _HUFFMAN_TO_ORDINAL
    for byte in data:
        for i in range(8):
            bit = (byte >> (7 - i)) & 0x1
            current = current[bit]
            if isinstance(current, bytes):
                decoded.append(current)
                current = _HUFFMAN_TO_ORDINAL
    return b''.join(decoded)
